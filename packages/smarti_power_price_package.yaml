# Home Assistant Configuration

input_number:
  cheapest_hours:
    name: Number of Cheapest Hours
    min: 0
    max: 24
    step: 1
    mode: slider

input_text:
  lowest_price_hours:
    name: Lowest Price Hours
    initial: "[]"

input_select:
  price_zone:
    name: "Price Zone"
    options:
      - NO1
      - NO2
      - NO3
      - NO4
      - NO5
    initial: NO1
    icon: mdi:map-marker

input_boolean:
  include_vat:
    name: "Include VAT"
    icon: mdi:percent

# Ensure that the Nordpool sensors for each region are set up and named accordingly:
# sensor.nordpool_kwh_no1_nok_3_10_025
# sensor.nordpool_kwh_no2_nok_3_10_025
# sensor.nordpool_kwh_no3_nok_3_10_025
# sensor.nordpool_kwh_no4_nok_3_10_025
# sensor.nordpool_kwh_no5_nok_3_10_025

template:
  - sensor:
      - name: "Power Saver Payload"
        state: "{{ states('sensor.power_saver_status') }}"
        attributes:
          hours: >
            {% set now_time = now().replace(hour=0, minute=0, second=0, microsecond=0) %}
            {% set val = states('input_text.lowest_price_hours') %}
            {% if val and val.startswith('[') %}
              {% set lowest_hours = val | from_json %}
            {% else %}
              {% set lowest_hours = [] %}
            {% endif %}
            {% set ns = namespace(data=[]) %}
            {% for i in range(48) %}
              {% set time = (now_time + timedelta(hours=i)).isoformat() %}
              {% if i in lowest_hours %}
                {% set onOff = 1 %}
              {% else %}
                {% set onOff = 0 %}
              {% endif %}
              {% set ns.data = ns.data + [{'start': time, 'onOff': onOff}] %}
            {% endfor %}
            {{ ns.data }}

      - name: "Power Saver Status"
        icon: mdi:flash-alert
        state: >
          {% set current_hour = now().hour | int %}
          {% set val = states('input_text.lowest_price_hours') %}
          {% if val and val.startswith('[') %}
            {% set lowest_hours = val | from_json %}
          {% else %}
            {% set lowest_hours = [] %}
          {% endif %}
          {% if current_hour in lowest_hours %}
            "On"
          {% else %}
            "Off"
          {% endif %}

      - name: "Nordpool Price"
        unit_of_measurement: "NOK/kWh"
        state: >
          {% set zone = states('input_select.price_zone') %}
          {% set zone_number = zone[-1:] %}
          {% set sensor_name = 'sensor.nordpool_kwh_no' ~ zone_number ~ '_nok_3_10_025' %}
          {{ states(sensor_name) | float(0) }}
        attributes:
          today: >
            {% set zone = states('input_select.price_zone') %}
            {% set zone_number = zone[-1:] %}
            {% set sensor_name = 'sensor.nordpool_kwh_no' ~ zone_number ~ '_nok_3_10_025' %}
            {{ state_attr(sensor_name, 'today') }}
          current_price: >
            {% set zone = states('input_select.price_zone') %}
            {% set zone_number = zone[-1:] %}
            {% set sensor_name = 'sensor.nordpool_kwh_no' ~ zone_number ~ '_nok_3_10_025' %}
            {{ state_attr(sensor_name, 'current_price') }}
          tomorrow: >
            {% set zone = states('input_select.price_zone') %}
            {% set zone_number = zone[-1:] %}
            {% set sensor_name = 'sensor.nordpool_kwh_no' ~ zone_number ~ '_nok_3_10_025' %}
            {{ state_attr(sensor_name, 'tomorrow') }}
          region: "{{ zone }}"
          hours: >
            {% set zone = states('input_select.price_zone') %}
            {% set zone_number = zone[-1:] %}
            {% set sensor_name = 'sensor.nordpool_kwh_no' ~ zone_number ~ '_nok_3_10_025' %}
            {% set prices_today = state_attr(sensor_name, 'today') or [] %}
            {% set prices_tomorrow = state_attr(sensor_name, 'tomorrow') or [] %}
            {% set prices = prices_today + prices_tomorrow %}
            {% set now_time = now().replace(hour=0, minute=0, second=0, microsecond=0) %}
            {% set ns = namespace(data=[]) %}
            {% for i in range(prices | length) %}
              {% set time = (now_time + timedelta(hours=i)).isoformat() %}
              {% set price = prices[i] %}
              {% set ns.data = ns.data + [{'start': time, 'price': price}] %}
            {% endfor %}
            {{ ns.data }}

      - name: "Adjusted Electricity Price"
        unit_of_measurement: "NOK/kWh"
        state: >
          {% set price = states('sensor.nordpool_price') | float(0) %}
          {% if is_state('input_boolean.include_vat', 'on') %}
            {{ (price * 1.25) | round(4) }}
          {% else %}
            {{ price | round(4) }}
          {% endif %}
        attributes:
          hours: >
            {% set prices = state_attr('sensor.nordpool_price', 'hours') %}
            {% if prices %}
              {% set include_vat = is_state('input_boolean.include_vat', 'on') %}
              {% set ns = namespace(data=[]) %}
              {% for item in prices %}
                {% set price = item.price | float(0) %}
                {% if include_vat %}
                  {% set price = (price * 1.25) | round(4) %}
                {% else %}
                  {% set price = price | round(4) %}
                {% endif %}
                {% set ns.data = ns.data + [{'start': item.start, 'price': price}] %}
              {% endfor %}
              {{ ns.data }}
            {% else %}
              []
            {% endif %}

      - name: "Grid Tariff"
        unit_of_measurement: "NOK/kWh"
        state: >
          {% set hour = now().hour %}
          {% set weekday = now().weekday() %}
          {% if weekday in [5, 6] %}
            {% if 6 <= hour < 22 %}
              {{ 0.3875 }}
            {% else %}
              {{ 0.5075 }}
            {% endif %}
          {% else %}
            {% if 6 <= hour < 22 %}
              {{ 0.5075 }}
            {% else %}
              {{ 0.3875 }}
            {% endif %}
          {% endif %}
        attributes:
          hours: >
            {% set now_time = now().replace(hour=0, minute=0, second=0, microsecond=0) %}
            {% set ns = namespace(data=[]) %}
            {% for i in range(48) %}
              {% set current_time = now_time + timedelta(hours=i) %}
              {% set time = current_time.isoformat() %}
              {% set weekday = current_time.weekday() %}
              {% set hour = current_time.hour %}
              {% if weekday in [5, 6] %}
                {% if 6 <= hour < 22 %}
                  {% set price = 0.3875 %}
                {% else %}
                  {% set price = 0.5075 %}
                {% endif %}
              {% else %}
                {% if 6 <= hour < 22 %}
                  {% set price = 0.5075 %}
                {% else %}
                  {% set price = 0.3875 %}
                {% endif %}
              {% endif %}
              {% set ns.data = ns.data + [{'start': time, 'price': price}] %}
            {% endfor %}
            {{ ns.data }}

      - name: "Government Support"
        unit_of_measurement: "NOK/kWh"
        state: >
          {% set price = states('sensor.adjusted_electricity_price') | float(0) %}
          {% if is_state('input_boolean.include_vat', 'on') %}
            {% set threshold = 0.9125 %}
          {% else %}
            {% set threshold = 0.73 %}
          {% endif %}
          {% if price > threshold %}
            {{ ((price - threshold) * 0.9) | round(4) }}
          {% else %}
            0.00
          {% endif %}
        attributes:
          hours: >
            {% set adjusted_prices = state_attr('sensor.adjusted_electricity_price', 'hours') %}
            {% if adjusted_prices %}
              {% set include_vat = is_state('input_boolean.include_vat', 'on') %}
              {% set threshold = 0.9125 if include_vat else 0.73 %}
              {% set ns = namespace(data=[]) %}
              {% for item in adjusted_prices %}
                {% set price = item.price | float(0) %}
                {% if price > threshold %}
                  {% set support = ((price - threshold) * 0.9) | round(4) %}
                {% else %}
                  {% set support = 0.00 %}
                {% endif %}
                {% set ns.data = ns.data + [{'start': item.start, 'price': support}] %}
              {% endfor %}
              {{ ns.data }}
            {% else %}
              []
            {% endif %}

      - name: "Effective Electricity Price"
        unit_of_measurement: "NOK/kWh"
        state: >
          {{
            (
              states('sensor.adjusted_electricity_price') | float(0)
              + states('sensor.grid_tariff') | float(0)
              - states('sensor.government_support') | float(0)
            ) | round(4)
          }}
        attributes:
          hours: >
            {% set adjusted_prices = state_attr('sensor.adjusted_electricity_price', 'hours') %}
            {% set grid_prices = state_attr('sensor.grid_tariff', 'hours') %}
            {% set support_prices = state_attr('sensor.government_support', 'hours') %}
            {% if adjusted_prices and grid_prices and support_prices %}
              {% set ns = namespace(data=[]) %}
              {% for i in range(adjusted_prices | length) %}
                {% set total_price = (adjusted_prices[i].price | float(0))
                                    + (grid_prices[i].price | float(0))
                                    - (support_prices[i].price | float(0)) %}
                {% set time = adjusted_prices[i].start %}
                {% set ns.data = ns.data + [{'start': time, 'price': total_price | round(4)}] %}
              {% endfor %}
              {{ ns.data }}
            {% else %}
              []
            {% endif %}

      - name: "Current Hour Price"
        unit_of_measurement: "NOK/kWh"
        icon: mdi:currency-usd
        state: >
          {{ state_attr('sensor.nordpool_price', 'current_price') | float(0) }}

automation:
  - alias: "Calculate Lowest Priced Hours"
    trigger:
      - platform: time
        at: "00:05:00" # Runs at 5 minutes past midnight
      - platform: homeassistant
        event: start # Runs when Home Assistant starts
      - platform: state
        entity_id: input_number.cheapest_hours # Recalculate when the user changes the number
    action:
      - variables:
          today: "{{ state_attr('sensor.nordpool_price', 'today') or [] }}"
          tomorrow: "{{ state_attr('sensor.nordpool_price', 'tomorrow') or [] }}"
          prices: "{{ today + tomorrow }}"
      - variables:
          indexed_prices: >
            {% set ns = namespace(prices=[]) %}
            {% for i in range(prices | length) %}
              {% set ns.prices = ns.prices + [{'index': i, 'price': prices[i]}] %}
            {% endfor %}
            {{ ns.prices }}
          sorted_prices: >
            {{ indexed_prices | sort(attribute='price') }}
          lowest_hours: >
            {% set count = states('input_number.cheapest_hours') | int %}
            {{ sorted_prices[:count] | map(attribute='index') | list }}
      - service: input_text.set_value
        target:
          entity_id: input_text.lowest_price_hours
        data:
          value: "{{ lowest_hours | to_json }}"
