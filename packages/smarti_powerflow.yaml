input_select:
  # Dropdowns for adding new devices to categories
  new_category_1_device:
    name: Add Device to Category 1
    options: ["Select a device"] # Placeholder value
  new_category_2_device:
    name: Add Device to Category 2
    options: ["Select a device"] # Placeholder value
  new_category_3_device:
    name: Add Device to Category 3
    options: ["Select a device"] # Placeholder value

  # Device lists for each category
  category_1_devices:
    name: Devices in Category 1
    options: ["No devices added"] # Initial placeholder
  category_2_devices:
    name: Devices in Category 2
    options: ["No devices added"] # Initial placeholder
  category_3_devices:
    name: Devices in Category 3
    options: ["No devices added"] # Initial placeholder

  delete_category_1_device:
    name: "Delete Device from Category 1"
    options: ["Select a device"] # This will be populated dynamically

  delete_category_2_device:
    name: "Delete Device from Category 2"
    options: ["Select a device"] # This will be populated dynamically

  delete_category_3_device:
    name: "Delete Device from Category 3"
    options: ["Select a device"] # This will be populated dynamically

input_button:
  delete_category_1_device_button:
    name: "Delete Selected Device from Category 1"
  delete_category_2_device_button:
    name: "Delete Selected Device from Category 2"
  delete_category_3_device_button:
    name: "Delete Selected Device from Category 3"

  add_device_category_1_button:
    name: "Add Selected Device to Category 1"

  add_device_category_2_button:
    name: "Add Selected Device to Category 2"

  add_device_category_3_button:
    name: "Add Selected Device to Category 2"

input_number:
  # Define initial priority settings for known devices (add more as needed)
  priority_device_thermostat_category_1:
    name: Thermostat Priority in Category 1
    min: 1
    max: 10
    step: 1
  priority_device_heater_category_2:
    name: Heater Priority in Category 2
    min: 1
    max: 10
    step: 1

input_text:
  category_1_devices:
    name: Devices in Category 1
    max: 255
  category_2_devices:
    name: Devices in Category 2
    max: 255
  category_3_devices:
    name: Devices in Category 3
    max: 255

template:
  - sensor:
      # Category 1 Parts
      - name: "category_1_device_entities_part1"
        state: >
          {% set devices = state_attr('input_select.category_1_devices', 'options') %}
          {% if devices and devices != ['No devices added'] %}
            {{ devices[0:5] | join(', ') }}
          {% else %}
            unknown
          {% endif %}
      - name: "category_1_device_entities_part2"
        state: >
          {% set devices = state_attr('input_select.category_1_devices', 'options') %}
          {% if devices and devices | length > 5 %}
            {{ devices[5:10] | join(', ') }}
          {% else %}
            unknown
          {% endif %}
      - name: "category_1_device_entities_part3"
        state: >
          {% set devices = state_attr('input_select.category_1_devices', 'options') %}
          {% if devices and devices | length > 10 %}
            {{ devices[10:15] | join(', ') }}
          {% else %}
            unknown
          {% endif %}
      - name: "category_1_device_entities_part4"
        state: >
          {% set devices = state_attr('input_select.category_1_devices', 'options') %}
          {% if devices and devices | length > 15 %}
            {{ devices[15:20] | join(', ') }}
          {% else %}
            unknown
          {% endif %}

      # Category 2 Parts
      - name: "category_2_device_entities_part1"
        state: >
          {% set devices = state_attr('input_select.category_2_devices', 'options') %}
          {% if devices and devices != ['No devices added'] %}
            {{ devices[0:5] | join(', ') }}
          {% else %}
            unknown
          {% endif %}
      - name: "category_2_device_entities_part2"
        state: >
          {% set devices = state_attr('input_select.category_2_devices', 'options') %}
          {% if devices and devices | length > 5 %}
            {{ devices[5:10] | join(', ') }}
          {% else %}
            unknown
          {% endif %}
      - name: "category_2_device_entities_part3"
        state: >
          {% set devices = state_attr('input_select.category_2_devices', 'options') %}
          {% if devices and devices | length > 10 %}
            {{ devices[10:15] | join(', ') }}
          {% else %}
            unknown
          {% endif %}
      - name: "category_2_device_entities_part4"
        state: >
          {% set devices = state_attr('input_select.category_2_devices', 'options') %}
          {% if devices and devices | length > 15 %}
            {{ devices[15:20] | join(', ') }}
          {% else %}
            unknown
          {% endif %}

      # Category 3 Parts
      - name: "category_3_device_entities_part1"
        state: >
          {% set devices = state_attr('input_select.category_3_devices', 'options') %}
          {% if devices and devices != ['No devices added'] %}
            {{ devices[0:5] | join(', ') }}
          {% else %}
            unknown
          {% endif %}
      - name: "category_3_device_entities_part2"
        state: >
          {% set devices = state_attr('input_select.category_3_devices', 'options') %}
          {% if devices and devices | length > 5 %}
            {{ devices[5:10] | join(', ') }}
          {% else %}
            unknown
          {% endif %}
      - name: "category_3_device_entities_part3"
        state: >
          {% set devices = state_attr('input_select.category_3_devices', 'options') %}
          {% if devices and devices | length > 10 %}
            {{ devices[10:15] | join(', ') }}
          {% else %}
            unknown
          {% endif %}
      - name: "category_3_device_entities_part4"
        state: >
          {% set devices = state_attr('input_select.category_3_devices', 'options') %}
          {% if devices and devices | length > 15 %}
            {{ devices[15:20] | join(', ') }}
          {% else %}
            unknown
          {% endif %}

      # Part 1 (devices 0-4)
      - name: "category_1_device_power_entities_part1"
        state: >
          {% set devices = state_attr('input_select.category_1_devices', 'options') | list %}
          {% set power_sensors = namespace(sensors=[]) %}

          {% for device in devices[0:5] if device != "No devices added" %}
            {% set base_name = device.split('.')[1] %}
            {% set power_sensor_id = 'sensor.' ~ base_name ~ '_power' %}

            {% if states(power_sensor_id) != 'unknown' and states(power_sensor_id) != 'unavailable' %}
              {% set power_sensors.sensors = power_sensors.sensors + [power_sensor_id] %}
            {% endif %}
          {% endfor %}

          {{ power_sensors.sensors | join(', ') if power_sensors.sensors else 'No power sensors available' }}

      # Part 2 (devices 5-9)
      - name: "category_1_device_power_entities_part2"
        state: >
          {% set devices = state_attr('input_select.category_1_devices', 'options') | list %}
          {% set power_sensors = namespace(sensors=[]) %}

          {% for device in devices[5:10] if device != "No devices added" %}
            {% set base_name = device.split('.')[1] %}
            {% set power_sensor_id = 'sensor.' ~ base_name ~ '_power' %}

            {% if states(power_sensor_id) != 'unknown' and states(power_sensor_id) != 'unavailable' %}
              {% set power_sensors.sensors = power_sensors.sensors + [power_sensor_id] %}
            {% endif %}
          {% endfor %}

          {{ power_sensors.sensors | join(', ') if power_sensors.sensors else 'No power sensors available' }}

      # Part 3 (devices 10-14)
      - name: "category_1_device_power_entities_part3"
        state: >
          {% set devices = state_attr('input_select.category_1_devices', 'options') | list %}
          {% set power_sensors = namespace(sensors=[]) %}

          {% for device in devices[10:15] if device != "No devices added" %}
            {% set base_name = device.split('.')[1] %}
            {% set power_sensor_id = 'sensor.' ~ base_name ~ '_power' %}

            {% if states(power_sensor_id) != 'unknown' and states(power_sensor_id) != 'unavailable' %}
              {% set power_sensors.sensors = power_sensors.sensors + [power_sensor_id] %}
            {% endif %}
          {% endfor %}

          {{ power_sensors.sensors | join(', ') if power_sensors.sensors else 'No power sensors available' }}

      # Part 4 (devices 15-19)
      - name: "category_1_device_power_entities_part4"
        state: >
          {% set devices = state_attr('input_select.category_1_devices', 'options') | list %}
          {% set power_sensors = namespace(sensors=[]) %}

          {% for device in devices[15:20] if device != "No devices added" %}
            {% set base_name = device.split('.')[1] %}
            {% set power_sensor_id = 'sensor.' ~ base_name ~ '_power' %}

            {% if states(power_sensor_id) != 'unknown' and states(power_sensor_id) != 'unavailable' %}
              {% set power_sensors.sensors = power_sensors.sensors + [power_sensor_id] %}
            {% endif %}
          {% endfor %}

          {{ power_sensors.sensors | join(', ') if power_sensors.sensors else 'No power sensors available' }}

      - name: "Total Controllable Power"
        unit_of_measurement: "W"
        state: >
          {% set category_1_devices = state_attr('input_select.category_1_devices', 'options') | default([]) %}
          {% set category_2_devices = state_attr('input_select.category_2_devices', 'options') | default([]) %}
          {% set category_3_devices = state_attr('input_select.category_3_devices', 'options') | default([]) %}

          {% set all_categories = category_1_devices + category_2_devices + category_3_devices %}
          {% set total_power = namespace(value=0) %}

          {% for device in all_categories if device != "No devices added" %}
            {% set base_name = device.split('.')[1] if device | regex_match('.*\\..*') else device %}
            {% set power_sensor = 'sensor.' ~ base_name ~ '_power' %}
            {% if states(power_sensor) is defined and states(power_sensor) not in ['unknown', 'unavailable'] %}
              {% set total_power.value = total_power.value + (states(power_sensor) | float(0)) %}
            {% endif %}
          {% endfor %}

          {{ total_power.value }}

      - name: "Power Difference (W)"
        unit_of_measurement: "W"
        state: >
          {% set dynamic_power = states('sensor.dynamic_power_sensor') | float(0) %}
          {% set total_controllable_power = states('sensor.total_controllable_power') | float(0) %}
          {{ (dynamic_power - total_controllable_power) | round(2) }}

      - name: "Controllable Power Percentage"
        unit_of_measurement: "%"
        state: >
          {% set dynamic_power = states('sensor.dynamic_power_sensor') | float(0) %}
          {% set total_controllable_power = states('sensor.total_controllable_power') | float(0) %}

          {% if dynamic_power > 0 %}
            {{ ((total_controllable_power / dynamic_power) * 100) | round(2) }}
          {% else %}
            0
          {% endif %}

      - name: "Non-controllable Power Percentage"
        unit_of_measurement: "%"
        state: >
          {% set dynamic_power = states('sensor.dynamic_power_sensor') | float(0) %}
          {% set total_controllable_power = states('sensor.total_controllable_power') | float(0) %}
          {% set non_controllable_power = dynamic_power - total_controllable_power %}

          {% if dynamic_power > 0 %}
            {{ ((non_controllable_power / dynamic_power) * 100) | round(2) }}
          {% else %}
            0
          {% endif %}

      - name: "Dynamic Power (kW)"
        unique_id: dynamic_power_kw
        unit_of_measurement: "kW"
        icon: mdi:flash
        state: >
          {% set power_watts = states('sensor.dynamic_power_sensor') | float(0) %}
          {{ (power_watts / 1000) | round(3) }}

automation:
  - alias: "Delete Device from Category 1"
    trigger:
      - platform: state
        entity_id: input_button.delete_category_1_device_button # Trigger on button press
    action:
      # Step 1: Remove the selected device from input_text.category_1_devices
      - service: input_text.set_value
        target:
          entity_id: input_text.category_1_devices
        data:
          value: >
            {% set device_to_delete = states('input_select.delete_category_1_device') %}
            {% set current_devices = states('input_text.category_1_devices').split(',') %}
            {% set updated_devices = current_devices | reject('equalto', device_to_delete) | list %}
            {{ updated_devices | join(',') if updated_devices | length > 0 else 'No devices added' }}

      # Step 2: Update input_select.category_1_devices, enforcing a non-empty list
      - service: input_select.set_options
        target:
          entity_id: input_select.category_1_devices
        data:
          options: >
            {% set current_text = states('input_text.category_1_devices') %}
            {% if current_text == 'No devices added' or current_text | length == 0 %}
              ['No devices added']
            {% else %}
              {{ current_text.split(',') | list }}
            {% endif %}

  - alias: "Delete Device from Category 2"
    trigger:
      - platform: state
        entity_id: input_button.delete_category_2_device_button
    action:
      - service: input_select.set_options
        target:
          entity_id: input_select.category_2_devices
        data:
          options: >
            {{ state_attr('input_select.category_2_devices', 'options') | reject('equalto', states('input_select.delete_category_2_device')) | list }}

  - alias: "Delete Device from Category 3"
    trigger:
      - platform: state
        entity_id: input_button.delete_category_3_device_button
    action:
      - service: input_select.set_options
        target:
          entity_id: input_select.category_3_devices
        data:
          options: >
            {{ state_attr('input_select.category_3_devices', 'options') | reject('equalto', states('input_select.delete_category_3_device')) | list }}

  - alias: "Populate Category 1 Device Deletion List"
    trigger:
      - platform: state
        entity_id: input_select.category_1_devices
    action:
      - service: input_select.set_options
        target:
          entity_id: input_select.delete_category_1_device
        data:
          options: "{{ state_attr('input_select.category_1_devices', 'options') }}"

  - alias: "Populate Category 2 Device Deletion List"
    trigger:
      - platform: state
        entity_id: input_select.category_2_devices
    action:
      - service: input_select.set_options
        target:
          entity_id: input_select.delete_category_2_device
        data:
          options: "{{ state_attr('input_select.category_2_devices', 'options') }}"

  - alias: "Populate Category 3 Device Deletion List"
    trigger:
      - platform: state
        entity_id: input_select.category_3_devices
    action:
      - service: input_select.set_options
        target:
          entity_id: input_select.delete_category_3_device
        data:
          options: "{{ state_attr('input_select.category_3_devices', 'options') }}"

  - id: "add_device_category_1"
    alias: "Add Device to Category 1"
    trigger:
      - platform: state
        entity_id: input_button.add_device_category_1_button # Trigger on button press
    action:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ states('input_select.new_category_1_device') != 'Select a device' }}"
            sequence:
              - service: input_text.set_value
                target:
                  entity_id: input_text.category_1_devices
                data:
                  value: >
                    {% set new_device = states('input_select.new_category_1_device') %}
                    {% set current_devices = states('input_text.category_1_devices').split(',') %}
                    {% if new_device not in current_devices %}
                      {{ (current_devices + [new_device]) | join(',') }}
                    {% else %}
                      {{ current_devices | join(',') }}
                    {% endif %}

              - service: input_select.set_options
                target:
                  entity_id: input_select.category_1_devices
                data:
                  options: >
                    {{ states('input_text.category_1_devices').split(',') | list }}

  - id: "add_device_category_2"
    alias: "Add Device to Category 2"
    trigger:
      - platform: state
        entity_id: input_button.add_device_category_2_button # Trigger on button press
    action:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ states('input_select.new_category_2_device') != 'Select a device' }}"
            sequence:
              - service: input_select.set_options
                target:
                  entity_id: input_select.category_2_devices
                data:
                  options: >
                    {{ (state_attr('input_select.category_2_devices', 'options') | list + [states('input_select.new_category_2_device')]) | unique | list }}
              - choose:
                  - conditions:
                      - condition: template
                        value_template: >
                          {{ 'input_number.priority_' ~ states('input_select.new_category_2_device') | replace(' ', '_') | replace('.', '_') | replace('-', '_') | lower }} is defined }}
                    sequence:
                      - service: input_number.set_value
                        target:
                          entity_id: >
                            input_number.priority_{{ states('input_select.new_category_2_device') | replace(' ', '_') | replace('.', '_') | replace('-', '_') | lower }}_category_2
                        data:
                          value: 1

  - id: "add_device_category_3"
    alias: "Add Device to Category 3"
    trigger:
      - platform: state
        entity_id: input_button.add_device_category_3_button # Trigger on button press
    action:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ states('input_select.new_category_3_device') != 'Select a device' }}"
            sequence:
              - service: input_select.set_options
                target:
                  entity_id: input_select.category_3_devices
                data:
                  options: >
                    {{ (state_attr('input_select.category_3_devices', 'options') | list + [states('input_select.new_category_3_device')]) | unique | list }}
              - choose:
                  - conditions:
                      - condition: template
                        value_template: >
                          {{ 'input_number.priority_' ~ states('input_select.new_category_3_device') | replace(' ', '_') | replace('.', '_') | replace('-', '_') | lower }} is defined }}
                    sequence:
                      - service: input_number.set_value
                        target:
                          entity_id: >
                            input_number.priority_{{ states('input_select.new_category_3_device') | replace(' ', '_') | replace('.', '_') | replace('-', '_') | lower }}_category_3
                        data:
                          value: 1
  #
  #  - id: "populate_category_device_options"
  #    alias: "Populate Category Device Options"
  #    trigger:
  #      - platform: homeassistant
  #        event: start
  #    action:
  #      - service: input_select.set_options
  #        target:
  #          entity_id: input_select.new_category_1_device
  #        data:
  #          options: >
  #            {{ states.switch | map(attribute='entity_id') | list }}
  #      - service: input_select.set_options
  #        target:
  #          entity_id: input_select.new_category_2_device
  #        data:
  #          options: >
  #            {{ states.switch | map(attribute='entity_id') | list }}
  #      - service: input_select.set_options
  #        target:
  #          entity_id: input_select.new_category_3_device
  #        data:
  #          options: >
  #            {{ states.switch | map(attribute='entity_id') | list }}

  - id: "populate_category_device_options"
    alias: "Populate Category Device Options"
    trigger:
      - platform: homeassistant
        event: start
    action:
      - service: input_select.set_options
        target:
          entity_id:
            - input_select.new_category_1_device
            - input_select.new_category_2_device
            - input_select.new_category_3_device
        data:
          options: >
            {% set high_power_domains = ['switch', 'fan', 'climate', 'humidifier', 'water_heater'] %}
            {% set entities = namespace(list=[]) %}
            {% for domain in high_power_domains %}
              {% for entity in states[domain] %}
                {% set base_name = entity.entity_id.split('.')[1] %}
                {% set power_sensors = states.sensor
                  | selectattr("entity_id", "search", base_name ~ ".*_(power|energy)$")
                  | map(attribute="entity_id")
                  | list %}
                {% if power_sensors %}
                  {% set entities.list = entities.list + [entity.entity_id] %}
                {% endif %}
              {% endfor %}
            {% endfor %}
            {{ entities.list | unique | list if entities.list else ['No high power devices found'] }}

  - alias: "Populate Category 1 Devices on Startup"
    trigger:
      - platform: homeassistant
        event: start
    action:
      - service: input_select.set_options
        target:
          entity_id: input_select.category_1_devices
        data:
          options: >
            {% set current_text = states('input_text.category_1_devices') %}
            {% if current_text == 'No devices added' or current_text | length == 0 %}
              ['No devices added']
            {% else %}
              {{ current_text.split(',') | list }}
            {% endif %}
